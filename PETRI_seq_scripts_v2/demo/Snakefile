# script_dir = f"{os.path.dirname(os.path.abspath(__file__))}/../scripts"
import os


def change_ext(filename, new_ext):
    base, _ = os.path.splitext(filename)
    return base + new_ext


script_dir = f"../scripts"
barcode_dir = f"data/sc_barcodes_v2"
n_lanes = 1
n_bc_idxs = 96
bc_1 = bc_2 = bc_3 = range(1, n_bc_idxs + 1)
sample = "random20000"
sample_string = f"{sample}_S1"


include: "rules/overlap.smk"
include: "rules/sc_pipeline.smk"


input_fastq = expand(
    "data/{sample}/{sample_string}_L00{lane}_R{r}_001.fastq.gz",
    sample_string=sample_string,
    lane=range(1, n_lanes + 1),
    r=[1, 2],
    sample=sample,
)

trimmed_fastq = expand(
    "results/{sample}/{sample}_QF_L00{lane}_R2_001.fastq",
    lane=range(1, n_lanes + 1),
    r=[1, 2],
    sample=sample,
)

fastqc_output = expand(
    "results/{sample}/{sample_string}_L00{lane}_R{r}_001_fastqc.{format}",
    sample_string=sample_string,
    sample=sample,
    lane=range(1, n_lanes + 1),
    r=[1, 2],
    format=["html", "zip"],
)


rule fastqc:
    input:
        f"data/{sample}/{{fastq_name}}.fastq.gz",
    output:
        expand(
            "results/{sample}/{{fastq_name}}_fastqc.{format}",
            sample=sample,
            format=["html", "zip"],
        ),
    shell:
        f"fastqc {input} -o results/{sample}"


rule quality_trim:
    # reverse is reserved for internal use by Snakemake, so we have to rewrite it
    input:
        forward=f"data/{sample}/{sample_string}_L00{{lane}}_R1_001.fastq.gz",
        reverse_seq=f"data/{sample}/{sample_string}_L00{{lane}}_R2_001.fastq.gz",
    output:
        forward="results/{sample}/{sample}_QF_L00{lane}_R1_001.fastq",
        reverse_seq="results/{sample}/{sample}_QF_L00{lane}_R2_001.fastq",
    shell:
        f"cutadapt -q 10,10 --minimum-length 55:14 --max-n 3 --pair-filter=any " f"-o {output.forward} -p {output.reverse_seq} " f"{input.forward} {input.reverse_seq}"


reference_genome = f"data/U00096_JE2.fa"
indexed_reference_genome = reference_genome + ".bwt"

reference_annotation = f"data/U00096_JE2_rRNA.gff"

sc_out = rules.sc_pipeline.output


rule bwa_index:
    input:
        "{genome}.fa",
    output:
        "{genome}.fa.bwt",
    shell:
        "bwa index {wildcards.genome}.fa"


rule pipeline_generic:
    input:
        sc_out.trimmed_sequences,
        sc_out.barcode_table,
        reference_genome,
        indexed_reference_genome,
        reference_annotation,
    output:
        count_matrix=f"results/{sample}_v11_threshold_0_mixed_species_gene_matrix.txt",
    shell:
        f"bash {script_dir}/pipeline_v2_generic.sh {sample} {reference_genome} {reference_annotation}"


knee_plot = f"results/{sample}_kneePlot.pdf"
histogram = f"results/{sample}_ReadsPerBC.pdf"


rule all:
    input:
        rules.pipeline_generic.output.count_matrix,
        knee_plot,
        histogram,
        fastqc_output,
